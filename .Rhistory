x<-c(4,TRUE)
class(x)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- c(3, 5, 1, 10, 12, 6)
x[x,6]<-0
x[x<6]<-0
x
x<-read.csv("hw1_data.csv")
x
names(x)
x[1:2, ]
x[152:153, ]
x[47, ]
x[47,Ozone ]
x[47,Ozone]
x[47,"Ozone"]
is.na(x)
table(is.na(x))
table(is.nan(x))
summary(x)
bad<-is.na(x)
x(!bad)
x[!bad]
good<-complete.cases(x)
x[good]
x[good, ]
summary(x[good, ])
q18<-x("Oxone">3)
x("Oxone">3)<-q18
x("Oxone">3)
y<-x("Oxone">3)
x
x["Oxone">3, ]
q18<-x["Oxone">3, ]
summary(q18)
q18<-x["Oxone">31, ]
q18
q18<-x["Oxone">31]
q18
x["Oxone">31]
x[x>31]
x[Ozone>31]
x[1>31]
x
q18<-x[Oxone>31]
x
q18<-x[Ozone>31]
q18<-x["Ozone">31]
q18
x[$Ozone]
q18<-x[x$Ozone>31]
Ozone <- na.omit(x$Ozone)
Ozone
class(Ozone)
as.numeric(Ozone)
class(Ozone)
mean(Ozone)
q18a<-x[x$Ozone>31]
q18a<-x[x$Ozone>31, ]
q18a
q18a<-x[x$Ozone>31, ,drop=FALSE]
q18a
x
q18a<-x[x$Ozone>31, ,drop=TRUE]
q18a
q18b<-q18a[q18a$Temp>90, ]
q18b
q18b<-q18a[q18a$Temp>90, ,drop=FALSE]
q18c<-q18a[q18a$Temp>90, ,drop=FALSE]
q18c
q18d<-na.omit(q18b)
mean(q18d[q18d$Solar.R])
mean(q18d[q18d$Solar.R, ])
mean(q18d$Solar.R)
q19a<-x[x$Month==6, ]
q19a
mean(q19a$Temp)
q20a<-x[x$Month==5, ]
max(q20a$Ozone)
q20a
summary(q20a)
q20b<-na.omit(q20a)
max(q20b)
max(q20b$Ozone)
summary(x)
y <- c(4, TRUE)
class(y)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
ls()
dir()
rm(list=ls())
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
bye()
exit()
swirl()
library(swirl)
rm(list=ls())
swirl()
my_div<-z/my_sqrt
my_div
c(1,2,3)+c(10,10)
c(1,2,3)+c(0,10)
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,100)
z*2+100
(z*2+100)
(z*2+1000)
(z * 2 + 1000)
info()
skip()
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create(testdir)
dir.create(path=testdir)
?dir.create
dir.create(testdir, showWarnings = TRUE, recursive = FALSE, mode = "0777")
mkdir testdir
mkdir(testdir)
create.dir(C:/Users/Brett/Documents/R/testdir)
skip()
dir.create("testdir")
setwd(tertdir)
setwd("tertdir"")
setwd("tertdir)
setwd("tertdir")
getwd()
setwd("testdir")
file.create(mytest.R)
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("myfile.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
?file.path
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive=true)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
setwd(old.dir)
unlink("testdir2",recursive = TRUE)
unlink("testdir",recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(1,10,by=0.5)
seq(0,10,by=0.5)
my_seq<-seq(0,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2)times=10)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-(num_vect<1)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Brett")
my_name
paste(my_name,collapse=" ")
paste("Hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("x","y","z"),sep="")
paste(1:3, c("x","y","z"), sep="")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,5,NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
is.na(my_data)
myna<-is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
inf/inf
inf()/inf()
Inf/Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
x[x[c(3,5,7)]
x[c(1,3,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names[vect)]
names(vect)
c(11,2,NA)
vect<-c(11,2,NA)
vect<-c(foo=11,bar=2,norf=NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-(Bill,Gina,Kelly,Sean)
patients<-("Bill","Gina","Kelly","Sean")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
mydata<-data.frame(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-names("pateient","age","weight","bp","rating")
cnames<-c("patient","age","weight","bp","rating")
cnames<-c("patient","age","weight","bp","rating","test")
?colnames
colnames(my_data,cnames)
colnames(my_data)
colnames(my_data)<-cnames
my_data
FALSE | TRUE
FALSE || TRUE
FALSE & TRUE
sample(10,5)
sample(10,10)
source("corr3.R")
corr3("specdata")
source("corr3.R")
corr3("specdata")
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(brett, brett[,1]))
lapply(x, function(brett), brett[,1]))
lapply(x, function(brett) brett[,1]))
lapply(x, function(elt) elt[,1]))
lapply(x, function(elt) elt[,1])
lapply(x, function(brett) brett[,1])
swirl()
source("swirl")
source(swirl)
library(swirl)
rm(list=ls())
swirl()
had(flags)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls.list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique(flags))
unique_vals <- lapply(flags, unique())
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$lanimate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
sapply(mtcars, cyl, mean)
sapply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
tapply(mtcar$hp mtcar$cyl, mean)
tapply(mtcars$hp mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
abs(mean(mtcars$hp[mtcars$cyl==4])-mean(mtcars$hp[mtcars$cyl==8]))
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
c <- matrix(1:4, 2 ,2)
c
c1 <- solve(c) %*% c
c1
c2 <- solve(c)
c2
source(makeCacheMatrix)
source('makeCacheMatrix')
source('cacheMatrix.R')
source("cacheMatrix.R")
source("cachematrix.R")
source('cachematrix.R')
source(cachematrix.R)
library(cachematrix.R)
library('cachematrix.R'')
library('cachematrix.R')
library("cachematrix.R")
source("cachematrix.R")
cd ..
dir /User/Brett/gitbash
source("cachematrix.R")
ls()
ls
getwd()
setwd("~/R/ProgrammingAssignment2")
setwd
getwd()
ls
source("cachematrix.R")
source("cachematrix.R")
makeCacheMatrix(c)
c
cacheSolve(c)
x <- c
makeCacheMatrix(x)
cacheSolve(x)
x
x,- null
x,- null
x<- null
x<- NULL
makeCacheMatrix(c)
getinv
i
source("cachematrix.R")
makeCacheMatrix(c)
cacheSolve(c)
cacheSolve <- function(x=makeCacheMatrix(1:4, nrow=2, ncol=2), ...)
cacheSolve(matrix(1:4, 2, 2))
source("cachematrix.R")
makeCacheMatrix(c)
cacheSolve(c)
cacheSolve <- function(x=makeCacheMatrix(1:4, nrow=2, ncol=2), ...)
cacheSolve <- function(x=makeCacheMatrix(1:4, nrow=2, ncol=2))
source("test.R")
source("test.R")
source("test.R")
source("test.R")
makeCacheMatrix1(c)
source("test.R")
makeCacheMatrix1(c)
source("test.R")
source("test.R")
source("test.R")
makeCacheMatrix1(c)
cacheSolve1(c)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
mymatrix()
my_matrix()
my_matrix$get()
my_matrix$getinv()
cachesolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$getinv()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix
my_matrix$getinv
my_matrix$getinv()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
